name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Listar arquivos do projeto
        run: ls -R

      - name: Instalar dependências do Maven (se necessário)
        run: |
          sudo apt-get update
          sudo apt-get install maven

      - name: Compilar código Java e rodar testes
        run: |
          mkdir -p out
          # Compile todas as classes Java na pasta src
          javac -d out $(find src -name "*.java") || { echo "::error::Falha na compilação!"; exit 1; }
          
          # Rodar os testes com JUnit (caso use Maven, pode ajustar o comando)
          # Se você usa JUnit e não tem um sistema de build, você precisará incluir as dependências do JUnit manualmente:
          java -cp out:$(find ~/.m2/repository -name "junit-*.jar" | tr '\n' ':') org.junit.runner.JUnitCore $(find src -name "*Test.java" -exec basename {} .java \;) || { echo "::error::Testes falharam!"; exit 1; }
          
          echo "✅ Testes passaram!"

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Configurar chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo -e "Host local-server\n  HostName 192.168.1.51\n  User vaio\n  IdentityFile ~/.ssh/id_ed25519\n  StrictHostKeyChecking no" > ~/.ssh/config

      - name: Deploy no servidor via SSH
        run: |
          ssh -o StrictHostKeyChecking=no vaio@192.168.1.51 "cd /c/Users/vaio/CICD/CICD && ./deploy.sh"
